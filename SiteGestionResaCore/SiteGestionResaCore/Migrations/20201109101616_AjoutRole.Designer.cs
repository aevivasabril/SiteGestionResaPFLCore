// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SiteGestionResaCore.Data.Data;

namespace SiteGestionResaCore.Migrations
{
    [DbContext(typeof(GestionResaContext))]
    [Migration("20201109101616_AjoutRole")]
    partial class AjoutRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "026c4c89-61ed-41e9-8aea-3043b7436498",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "5fd92704-2a91-4925-9334-40c6594fab81",
                            Name = "Utilisateur",
                            NormalizedName = "UTILISATEUR"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "cfa2e30f-3f42-4203-b7ec-01a9d2ad08bd",
                            Name = "MainAdmin",
                            NormalizedName = "MAINADMIN"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "63c57bd8-829c-4eef-82d6-31f7afedc894",
                            Name = "Logistic",
                            NormalizedName = "LOGISTIC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.equipement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("mobile")
                        .HasColumnType("bit");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("numGmao")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("zoneID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("zoneID");

                    b.ToTable("equipement");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.essai", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("commentaire")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("compte_userID")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("confidentialite")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("date_creation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("date_inf_confidentiel")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("date_sup_confidentiel")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("date_validation")
                        .HasColumnType("datetime");

                    b.Property<string>("destination_produit")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("manipulateurID")
                        .HasColumnType("int");

                    b.Property<string>("precision_produit")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("projetID")
                        .HasColumnType("int");

                    b.Property<string>("provenance_produit")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("quantite_produit")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("raison_refus")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("raison_suppression")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool?>("repondu_enquete")
                        .HasColumnType("bit");

                    b.Property<bool?>("resa_refuse")
                        .HasColumnType("bit");

                    b.Property<bool?>("resa_supprime")
                        .HasColumnType("bit");

                    b.Property<string>("status_essai")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool>("transport_stlo")
                        .HasColumnType("bit");

                    b.Property<string>("type_produit_entrant")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.HasIndex("manipulateurID");

                    b.HasIndex("projetID");

                    b.ToTable("essai");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.ld_destination", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_destination")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("ld_destination");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.ld_financement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_financement")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("ld_financement");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.ld_produit_in", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_produit_in")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("ld_produit_in");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.ld_provenance", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_provenance")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("ld_provenance");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.ld_provenance_produit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_provenance_produit")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("ld_provenance_produit");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.ld_type_projet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_type_projet")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("ld_type_projet");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.organisme", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_organisme")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("organisme");

                    b.HasData(
                        new
                        {
                            id = 1,
                            nom_organisme = "Inrae"
                        },
                        new
                        {
                            id = 2,
                            nom_organisme = "Agrocampus Ouest"
                        },
                        new
                        {
                            id = 3,
                            nom_organisme = "Quescrem"
                        },
                        new
                        {
                            id = 4,
                            nom_organisme = "Eurial"
                        },
                        new
                        {
                            id = 5,
                            nom_organisme = "Actalia"
                        });
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.projet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("compte_userID")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("date_creation")
                        .HasColumnType("datetime");

                    b.Property<string>("description_projet")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("financement")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("mailRespProjet")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("num_projet")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("organismeID")
                        .HasColumnType("int");

                    b.Property<string>("provenance")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("titre_projet")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("type_projet")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.HasIndex("organismeID");

                    b.ToTable("projet");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.reservation_projet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date_debut")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("date_fin")
                        .HasColumnType("datetime");

                    b.Property<int>("equipementID")
                        .HasColumnType("int");

                    b.Property<int>("essaiID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("equipementID");

                    b.HasIndex("essaiID");

                    b.ToTable("reservation_projet");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("organismeID")
                        .HasColumnType("int");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("organismeID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.zone", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_zone")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("zone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiteGestionResaCore.Data.utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.equipement", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.zone", "zone")
                        .WithMany("equipement")
                        .HasForeignKey("zoneID")
                        .HasConstraintName("FK_equipement_zone")
                        .IsRequired();
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.essai", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.utilisateur", "manipulateur")
                        .WithMany("essai")
                        .HasForeignKey("manipulateurID")
                        .HasConstraintName("FK_essai_utilisateur")
                        .IsRequired();

                    b.HasOne("SiteGestionResaCore.Data.projet", "projet")
                        .WithMany("essai")
                        .HasForeignKey("projetID")
                        .HasConstraintName("FK_essai_projet")
                        .IsRequired();
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.projet", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.organisme", "organisme")
                        .WithMany("projet")
                        .HasForeignKey("organismeID")
                        .HasConstraintName("FK_projet_organisme");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.reservation_projet", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.equipement", "equipement")
                        .WithMany("reservation_projet")
                        .HasForeignKey("equipementID")
                        .HasConstraintName("FK_reservation_projet_equipement")
                        .IsRequired();

                    b.HasOne("SiteGestionResaCore.Data.essai", "essai")
                        .WithMany("reservation_projet")
                        .HasForeignKey("essaiID")
                        .HasConstraintName("FK_reservation_projet_essai")
                        .IsRequired();
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.utilisateur", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.organisme", "organisme")
                        .WithMany("utilisateur")
                        .HasForeignKey("organismeID")
                        .HasConstraintName("FK_utilisateur_organisme");
                });
#pragma warning restore 612, 618
        }
    }
}
