// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SiteGestionResaCore.Data.Data;

namespace SiteGestionResaCore.Migrations
{
    [DbContext(typeof(GestionResaContext))]
    [Migration("20210204143833_MajTableEquipementTablesPcVue")]
    partial class MajTableEquipementTablesPcVue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1beca1ef-7fe7-46cd-b68f-b8fce8364fa6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "a97d4458-3e0d-4f26-9f56-7f918f73016b",
                            Name = "Utilisateur",
                            NormalizedName = "UTILISATEUR"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "f952f25a-8044-43f5-8da1-6bd69f6e313b",
                            Name = "MainAdmin",
                            NormalizedName = "MAINADMIN"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "6699a482-e596-476b-881b-6d1d6e6f5865",
                            Name = "Logistic",
                            NormalizedName = "LOGISTIC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.enquete", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date_envoi_enquete")
                        .HasColumnType("datetime2")
                        .IsUnicode(false);

                    b.Property<DateTime?>("date_reponse")
                        .HasColumnType("datetime2");

                    b.Property<int>("essaiId")
                        .HasColumnType("int");

                    b.Property<string>("fichierReponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("reponduEnquete")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("essaiId")
                        .IsUnique();

                    b.ToTable("enquete");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.equipement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("mobile")
                        .HasColumnType("bit");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("nomTabPcVue")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("numGmao")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("zoneID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("zoneID");

                    b.ToTable("equipement");

                    b.HasData(
                        new
                        {
                            id = 162,
                            mobile = false,
                            nom = "Balance Arpège 150k",
                            numGmao = "BAL0002",
                            zoneID = 5
                        },
                        new
                        {
                            id = 163,
                            mobile = false,
                            nom = "Balance 32 Kg (KA32s)",
                            numGmao = "BAL0003",
                            zoneID = 9
                        },
                        new
                        {
                            id = 164,
                            mobile = false,
                            nom = "Balance 300Kg (ID2 + KCS300)",
                            numGmao = "BAL0004",
                            zoneID = 3
                        },
                        new
                        {
                            id = 165,
                            mobile = true,
                            nom = "Balance OHAUS 2 Kg (Scout Pro SPU2001)",
                            numGmao = "BAL0011",
                            zoneID = 16
                        },
                        new
                        {
                            id = 166,
                            mobile = true,
                            nom = "Balance HBM 60 Kg (WE2110)",
                            numGmao = "BAL0054",
                            zoneID = 1
                        },
                        new
                        {
                            id = 167,
                            mobile = true,
                            nom = "Balance 60Kg PRECIA MOLEN (X112-A)",
                            numGmao = "BAL0057",
                            zoneID = 17
                        },
                        new
                        {
                            id = 168,
                            mobile = false,
                            nom = "Analyseur humidité METTLER TOLEDO 71 g (HE73/01)",
                            numGmao = "BAL0059",
                            zoneID = 11
                        },
                        new
                        {
                            id = 169,
                            mobile = false,
                            nom = "Brassoires PM",
                            numGmao = "BRAS0001",
                            zoneID = 6
                        },
                        new
                        {
                            id = 170,
                            mobile = false,
                            nom = "Mélangeur cuiseur stéphan",
                            numGmao = "CUISMEL0001",
                            zoneID = 9
                        },
                        new
                        {
                            id = 171,
                            mobile = true,
                            nom = "Echangeur récupérateur",
                            numGmao = "ECH0001",
                            zoneID = 17
                        },
                        new
                        {
                            id = 172,
                            mobile = true,
                            nom = "Echangeur avec pompe centrifuge (regulation chaud/froid)",
                            numGmao = "ECH0002",
                            zoneID = 17
                        },
                        new
                        {
                            id = 173,
                            mobile = true,
                            nom = "Thermorégulateur vulcatherm (membrane)",
                            numGmao = "ECH0004",
                            zoneID = 17
                        },
                        new
                        {
                            id = 174,
                            mobile = true,
                            nom = "Thermorégulateur vulcatherm (séchage)",
                            numGmao = "ECH0005",
                            zoneID = 17
                        },
                        new
                        {
                            id = 175,
                            mobile = true,
                            nom = "Echangeur avec pompe centrifuge(bleu)",
                            numGmao = "ECH0006",
                            zoneID = 17
                        },
                        new
                        {
                            id = 176,
                            mobile = true,
                            nom = "Echangeur avec pompe centrifuge",
                            numGmao = "ECH0007",
                            zoneID = 17
                        },
                        new
                        {
                            id = 177,
                            mobile = true,
                            nom = "Echangeur avec comptage",
                            numGmao = "ECH0009",
                            zoneID = 17
                        },
                        new
                        {
                            id = 178,
                            mobile = false,
                            nom = "Echangeur à surface raclée Contherm (ESR)",
                            numGmao = "ECH0010",
                            zoneID = 4
                        },
                        new
                        {
                            id = 179,
                            mobile = false,
                            nom = "Armoire affinage AFV7HC Elimeca 1",
                            numGmao = "ECLIM0001",
                            zoneID = 16
                        },
                        new
                        {
                            id = 180,
                            mobile = false,
                            nom = "Armoire affinage AFV7HC Elimeca 2",
                            numGmao = "ECLIM0002",
                            zoneID = 16
                        },
                        new
                        {
                            id = 181,
                            mobile = true,
                            nom = "Ecrémeuse ELECREM modèle 3 (150L/h)",
                            numGmao = "ECREM0001",
                            zoneID = 17
                        },
                        new
                        {
                            id = 182,
                            mobile = false,
                            nom = "Ecrémeuse Westfalia EASYCREAM",
                            nomTabPcVue = "tab_UA_ECR",
                            numGmao = "ECREM0002",
                            zoneID = 3
                        },
                        new
                        {
                            id = 183,
                            mobile = true,
                            nom = "Mini-cuve N°1 (150L)",
                            numGmao = "ECUV0003",
                            zoneID = 17
                        },
                        new
                        {
                            id = 184,
                            mobile = true,
                            nom = "Mini-cuve N°6 (150L)",
                            numGmao = "ECUV0004",
                            zoneID = 17
                        },
                        new
                        {
                            id = 185,
                            mobile = true,
                            nom = "Mini-cuve N°2 (100L)",
                            numGmao = "ECUV0005",
                            zoneID = 17
                        },
                        new
                        {
                            id = 186,
                            mobile = true,
                            nom = "Mini-cuve N°3 (100L)",
                            numGmao = "ECUV0006",
                            zoneID = 17
                        },
                        new
                        {
                            id = 187,
                            mobile = true,
                            nom = "Mini cuve 150L",
                            numGmao = "ECUV0007",
                            zoneID = 17
                        },
                        new
                        {
                            id = 188,
                            mobile = false,
                            nom = "2 cuves maturation 500L",
                            nomTabPcVue = "tab_UA_MAT",
                            numGmao = "ECUV0010",
                            zoneID = 3
                        },
                        new
                        {
                            id = 189,
                            mobile = false,
                            nom = "Tank 1000L avec agitation et groupe froid",
                            numGmao = "ECUV0012",
                            zoneID = 4
                        },
                        new
                        {
                            id = 190,
                            mobile = false,
                            nom = "Cuve PPC Châlon-Mégard 1000 litres",
                            numGmao = "ECUV0014",
                            zoneID = 7
                        },
                        new
                        {
                            id = 191,
                            mobile = true,
                            nom = "Table égouttage PM 1",
                            numGmao = "ECUV0016",
                            zoneID = 5
                        },
                        new
                        {
                            id = 192,
                            mobile = true,
                            nom = "Table égouttage PM 2",
                            numGmao = "ECUV0017",
                            zoneID = 5
                        },
                        new
                        {
                            id = 193,
                            mobile = true,
                            nom = "Table égouttage PM 3",
                            numGmao = "ECUV0018",
                            zoneID = 5
                        },
                        new
                        {
                            id = 194,
                            mobile = true,
                            nom = "Mini-cuve N°8 (150L)",
                            numGmao = "ECUV0019",
                            zoneID = 17
                        },
                        new
                        {
                            id = 195,
                            mobile = true,
                            nom = "Mini-cuve N°4 (100L)",
                            numGmao = "ECUV0020",
                            zoneID = 17
                        },
                        new
                        {
                            id = 196,
                            mobile = true,
                            nom = "Mini-cuve de fabrication 1(2 cuves 10 litres et 20 litres)",
                            numGmao = "ECUV0021",
                            zoneID = 7
                        },
                        new
                        {
                            id = 197,
                            mobile = true,
                            nom = "Mini-cuve de fabrication 2(2 cuves 10 litres et 20 litres)",
                            numGmao = "ECUV0022",
                            zoneID = 7
                        },
                        new
                        {
                            id = 198,
                            mobile = true,
                            nom = "Mini-cuve de fabrication 3(2 cuves 10 litres et 20 litres)",
                            numGmao = "ECUV0023",
                            zoneID = 7
                        },
                        new
                        {
                            id = 199,
                            mobile = false,
                            nom = "Tank GEA 550L avec agitation et groupe froid CVB",
                            numGmao = "ECUV0025",
                            zoneID = 8
                        },
                        new
                        {
                            id = 200,
                            mobile = false,
                            nom = "Cuve 2000L avec agitateur",
                            nomTabPcVue = "tab_UA_CUV",
                            numGmao = "ECUV0026",
                            zoneID = 2
                        },
                        new
                        {
                            id = 201,
                            mobile = true,
                            nom = "Mini-cuve N°5 (150L)",
                            numGmao = "ECUV0027",
                            zoneID = 17
                        },
                        new
                        {
                            id = 202,
                            mobile = true,
                            nom = "Machine emballage sous vide BRITEK SC800L",
                            numGmao = "EMB0001",
                            zoneID = 15
                        },
                        new
                        {
                            id = 203,
                            mobile = true,
                            nom = "Thermoscelleuse ERECAM semi-automatique dia:68/95/116",
                            numGmao = "EMB0003",
                            zoneID = 12
                        },
                        new
                        {
                            id = 204,
                            mobile = true,
                            nom = "Chariot dosage ERECAM combidos 102T (doseuse)",
                            numGmao = "EMB0004",
                            zoneID = 12
                        },
                        new
                        {
                            id = 205,
                            mobile = true,
                            nom = "Etuve biocomcept BC240 FIRLABO",
                            numGmao = "ETUV0039",
                            zoneID = 12
                        },
                        new
                        {
                            id = 206,
                            mobile = false,
                            nom = "Homogénéisateur 2 têtes RANNIE",
                            numGmao = "HOMO0002",
                            zoneID = 3
                        },
                        new
                        {
                            id = 207,
                            mobile = false,
                            nom = "Homogénéisateur 12/51H RANNIE",
                            numGmao = "HOMO0003",
                            zoneID = 3
                        },
                        new
                        {
                            id = 208,
                            mobile = true,
                            nom = "Homogénéisateur Panda",
                            numGmao = "HOMO0007",
                            zoneID = 13
                        },
                        new
                        {
                            id = 209,
                            mobile = true,
                            nom = "Chariots porte-bassines PM (N°1)",
                            numGmao = "MANUT002",
                            zoneID = 6
                        },
                        new
                        {
                            id = 210,
                            mobile = true,
                            nom = "Chariots porte-bassines PM (N°2)",
                            numGmao = "MANUT0012",
                            zoneID = 6
                        },
                        new
                        {
                            id = 211,
                            mobile = false,
                            nom = "Ensemble NEP",
                            nomTabPcVue = "tab_UA_NEP",
                            numGmao = "MLAV0016",
                            zoneID = 2
                        },
                        new
                        {
                            id = 212,
                            mobile = false,
                            nom = "Système de moulage PM et basculeur",
                            numGmao = "MOUL0001",
                            zoneID = 5
                        },
                        new
                        {
                            id = 213,
                            mobile = false,
                            nom = "Pilote ultrafiltration TIA spirale",
                            nomTabPcVue = "tab_UA_SPI",
                            numGmao = "PILOT0001",
                            zoneID = 8
                        },
                        new
                        {
                            id = 214,
                            mobile = false,
                            nom = "Pilote UF TIA/PALL 0,02u (JYG)",
                            numGmao = "PILOT0002",
                            zoneID = 8
                        },
                        new
                        {
                            id = 215,
                            mobile = false,
                            nom = "Pilote OI NF UF Prolab Milipore",
                            numGmao = "PILOT0003",
                            zoneID = 8
                        },
                        new
                        {
                            id = 216,
                            mobile = false,
                            nom = "Pilote filtration engineering (OI et NF)",
                            numGmao = "PILOT0004",
                            zoneID = 4
                        },
                        new
                        {
                            id = 217,
                            mobile = true,
                            nom = "Pilote de microfiltration MFS1",
                            numGmao = "PILOT0005",
                            zoneID = 8
                        },
                        new
                        {
                            id = 218,
                            mobile = false,
                            nom = "Pilote de microfiltration MFMG",
                            nomTabPcVue = "tab_UA_MFMG",
                            numGmao = "PILOT0006",
                            zoneID = 3
                        },
                        new
                        {
                            id = 219,
                            mobile = false,
                            nom = "Pilote de microfiltration MFS19",
                            numGmao = "PILOT0007",
                            zoneID = 4
                        },
                        new
                        {
                            id = 220,
                            mobile = false,
                            nom = "Pilote de microfiltration GP7",
                            nomTabPcVue = "tab_UA_GP7",
                            numGmao = "PILOT0008",
                            zoneID = 4
                        },
                        new
                        {
                            id = 221,
                            mobile = false,
                            nom = "UF TAMI/tech-sep 8 kDa (13 m2)",
                            numGmao = "PILOT0009",
                            zoneID = 8
                        },
                        new
                        {
                            id = 222,
                            mobile = false,
                            nom = "Stérilisateur pilote tubulaire électrique ACTINI",
                            nomTabPcVue = "tab_UA_ACT",
                            numGmao = "PILOT0010",
                            zoneID = 3
                        },
                        new
                        {
                            id = 223,
                            mobile = false,
                            nom = "Pilote de traitement thermique UHT-HTST Lab 25EDH",
                            nomTabPcVue = "tab_UA_MTH",
                            numGmao = "PILOT0011",
                            zoneID = 8
                        },
                        new
                        {
                            id = 224,
                            mobile = true,
                            nom = "Pilote UF TAMI/Tia 8Kda mobile",
                            numGmao = "PILOT0013",
                            zoneID = 8
                        },
                        new
                        {
                            id = 225,
                            mobile = false,
                            nom = "Pilote évaporateur à flot tombant FF-1",
                            nomTabPcVue = "tab_UA_EVAA, tab_UA_EVAB",
                            numGmao = "PILOT0014",
                            zoneID = 1
                        },
                        new
                        {
                            id = 226,
                            mobile = false,
                            nom = "Pilote de microfiltration P3",
                            numGmao = "PILOT0015",
                            zoneID = 8
                        },
                        new
                        {
                            id = 227,
                            mobile = false,
                            nom = "Pilote de sèchage mono-disperse",
                            numGmao = "PILOT0016",
                            zoneID = 1
                        },
                        new
                        {
                            id = 228,
                            mobile = false,
                            nom = "Pilote tour de sèchage MINOR",
                            nomTabPcVue = "tab_UA_SEC",
                            numGmao = "PILOT0017",
                            zoneID = 1
                        },
                        new
                        {
                            id = 229,
                            mobile = false,
                            nom = "Pilote VALOBAB (MF et UF) SKID 12EO46",
                            nomTabPcVue = "tab_UA_VALO",
                            numGmao = "PILOT0018",
                            zoneID = 3
                        },
                        new
                        {
                            id = 230,
                            mobile = false,
                            nom = "Pilote UF (optimal)",
                            nomTabPcVue = "tab_UA_OPTIMAL",
                            numGmao = "PILOT0019",
                            zoneID = 4
                        },
                        new
                        {
                            id = 231,
                            mobile = true,
                            nom = "Pompe centrifuge 20 à 30 m3/h",
                            numGmao = "POMPE0002",
                            zoneID = 17
                        },
                        new
                        {
                            id = 232,
                            mobile = true,
                            nom = "Pompe PCM - 5 m3/h",
                            numGmao = "POMPE0003",
                            zoneID = 17
                        },
                        new
                        {
                            id = 233,
                            mobile = true,
                            nom = "Pompe disperseur de poudre - TRIBLENDER",
                            numGmao = "POMPE0004",
                            zoneID = 17
                        },
                        new
                        {
                            id = 234,
                            mobile = true,
                            nom = "Pompe de transfert de lait 58L/min (bleue)",
                            numGmao = "POMPE0006",
                            zoneID = 2
                        },
                        new
                        {
                            id = 235,
                            mobile = false,
                            nom = "Presse à fromage verticale",
                            numGmao = "PRES0002",
                            zoneID = 7
                        },
                        new
                        {
                            id = 236,
                            mobile = false,
                            nom = "Presse à fromage horizontale",
                            numGmao = "PRES0003",
                            zoneID = 7
                        },
                        new
                        {
                            id = 237,
                            mobile = false,
                            nom = "Tranche-caillé",
                            numGmao = "TRAN0001",
                            zoneID = 6
                        },
                        new
                        {
                            id = 238,
                            mobile = false,
                            nom = "Ecrémeuse Elecrem (ACTALIA) 500 l/h",
                            numGmao = "ACTALIA",
                            zoneID = 3
                        },
                        new
                        {
                            id = 239,
                            mobile = true,
                            nom = "Camion collecte",
                            numGmao = "",
                            zoneID = 2
                        },
                        new
                        {
                            id = 240,
                            mobile = false,
                            nom = "Bac de saumurage",
                            numGmao = "ECUV0015",
                            zoneID = 10
                        },
                        new
                        {
                            id = 241,
                            mobile = false,
                            nom = "3 cuves fromagerie 200 Litres",
                            numGmao = "ACTALIA",
                            zoneID = 7
                        },
                        new
                        {
                            id = 242,
                            mobile = false,
                            nom = "Hotte PSM",
                            numGmao = "",
                            zoneID = 12
                        },
                        new
                        {
                            id = 243,
                            mobile = false,
                            nom = "Boucle de Traitement Thermique Bain-marie MEMMERT - Type WNE45 + Thermo Haake K35",
                            numGmao = "PILOT0022",
                            zoneID = 8
                        },
                        new
                        {
                            id = 244,
                            mobile = true,
                            nom = "Thermocook",
                            numGmao = "",
                            zoneID = 12
                        });
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.essai", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("commentaire")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("compte_userID")
                        .HasColumnType("int");

                    b.Property<string>("confidentialite")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("date_creation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("date_inf_confidentiel")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("date_sup_confidentiel")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("date_validation")
                        .HasColumnType("datetime");

                    b.Property<string>("destination_produit")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("enqueteId")
                        .HasColumnType("int");

                    b.Property<int>("manipulateurID")
                        .HasColumnType("int");

                    b.Property<string>("precision_produit")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("projetID")
                        .HasColumnType("int");

                    b.Property<string>("provenance_produit")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("quantite_produit")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("raison_refus")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("raison_suppression")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool?>("repondu_enquete")
                        .HasColumnType("bit");

                    b.Property<bool?>("resa_refuse")
                        .HasColumnType("bit");

                    b.Property<bool?>("resa_supprime")
                        .HasColumnType("bit");

                    b.Property<string>("status_essai")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool>("transport_stlo")
                        .HasColumnType("bit");

                    b.Property<string>("type_produit_entrant")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.HasIndex("manipulateurID");

                    b.HasIndex("projetID");

                    b.ToTable("essai");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.ld_destination", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_destination")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("ld_destination");

                    b.HasData(
                        new
                        {
                            id = 1,
                            nom_destination = "Non connu (sans dégustation)"
                        },
                        new
                        {
                            id = 2,
                            nom_destination = "Plan HACCP"
                        },
                        new
                        {
                            id = 3,
                            nom_destination = "Test sensoriel"
                        });
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.ld_financement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_financement")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("ld_financement");

                    b.HasData(
                        new
                        {
                            id = 1,
                            nom_financement = "Public"
                        },
                        new
                        {
                            id = 2,
                            nom_financement = "Privé"
                        },
                        new
                        {
                            id = 3,
                            nom_financement = "STLO"
                        });
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.ld_produit_in", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_produit_in")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("ld_produit_in");

                    b.HasData(
                        new
                        {
                            id = 1,
                            nom_produit_in = "Autre"
                        },
                        new
                        {
                            id = 2,
                            nom_produit_in = "Lait"
                        },
                        new
                        {
                            id = 3,
                            nom_produit_in = "Lactoserum"
                        },
                        new
                        {
                            id = 4,
                            nom_produit_in = "Babeurre"
                        });
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.ld_provenance", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_provenance")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("ld_provenance");

                    b.HasData(
                        new
                        {
                            id = 1,
                            nom_provenance = "Régional"
                        },
                        new
                        {
                            id = 2,
                            nom_provenance = "National"
                        },
                        new
                        {
                            id = 3,
                            nom_provenance = "International"
                        },
                        new
                        {
                            id = 4,
                            nom_provenance = "Européen"
                        });
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.ld_provenance_produit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_provenance_produit")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("ld_provenance_produit");

                    b.HasData(
                        new
                        {
                            id = 1,
                            nom_provenance_produit = "Autre"
                        },
                        new
                        {
                            id = 2,
                            nom_provenance_produit = "Non connu"
                        },
                        new
                        {
                            id = 3,
                            nom_provenance_produit = "Retiers"
                        },
                        new
                        {
                            id = 4,
                            nom_provenance_produit = "St Malo"
                        },
                        new
                        {
                            id = 5,
                            nom_provenance_produit = "Montauban"
                        },
                        new
                        {
                            id = 6,
                            nom_provenance_produit = "Noyal"
                        },
                        new
                        {
                            id = 7,
                            nom_provenance_produit = "Earl Lorret"
                        },
                        new
                        {
                            id = 8,
                            nom_provenance_produit = "Earl Lemarchand"
                        });
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.ld_type_projet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_type_projet")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("ld_type_projet");

                    b.HasData(
                        new
                        {
                            id = 1,
                            nom_type_projet = "Non connu"
                        },
                        new
                        {
                            id = 2,
                            nom_type_projet = "Recherche"
                        },
                        new
                        {
                            id = 3,
                            nom_type_projet = "Formation/Stage"
                        },
                        new
                        {
                            id = 4,
                            nom_type_projet = "Industriel (cellules hébergés"
                        });
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.organisme", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_organisme")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("organisme");

                    b.HasData(
                        new
                        {
                            id = 1,
                            nom_organisme = "Inrae"
                        },
                        new
                        {
                            id = 2,
                            nom_organisme = "Agrocampus Ouest"
                        },
                        new
                        {
                            id = 3,
                            nom_organisme = "Quescrem"
                        },
                        new
                        {
                            id = 4,
                            nom_organisme = "Eurial"
                        },
                        new
                        {
                            id = 5,
                            nom_organisme = "Actalia"
                        });
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.projet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("compte_userID")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("date_creation")
                        .HasColumnType("datetime");

                    b.Property<string>("description_projet")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("financement")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("mailRespProjet")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("num_projet")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("organismeID")
                        .HasColumnType("int");

                    b.Property<string>("provenance")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("titre_projet")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("type_projet")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.HasIndex("organismeID");

                    b.ToTable("projet");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.reservation_projet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date_debut")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("date_fin")
                        .HasColumnType("datetime");

                    b.Property<int>("equipementID")
                        .HasColumnType("int");

                    b.Property<int>("essaiID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("equipementID");

                    b.HasIndex("essaiID");

                    b.ToTable("reservation_projet");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("organismeID")
                        .HasColumnType("int");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("organismeID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.zone", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom_zone")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("id");

                    b.ToTable("zone");

                    b.HasData(
                        new
                        {
                            id = 1,
                            nom_zone = "Concentration & Sechage"
                        },
                        new
                        {
                            id = 2,
                            nom_zone = "Dépotage & Stockage"
                        },
                        new
                        {
                            id = 3,
                            nom_zone = "Préparation des laits"
                        },
                        new
                        {
                            id = 4,
                            nom_zone = "Membranes"
                        },
                        new
                        {
                            id = 5,
                            nom_zone = "Pâtes molles moulage"
                        },
                        new
                        {
                            id = 6,
                            nom_zone = "Pâtes molles tranchage"
                        },
                        new
                        {
                            id = 7,
                            nom_zone = "Pâtes préssées cuites"
                        },
                        new
                        {
                            id = 8,
                            nom_zone = "Innovation"
                        },
                        new
                        {
                            id = 9,
                            nom_zone = "Salle Stephan"
                        },
                        new
                        {
                            id = 10,
                            nom_zone = "Saumurage"
                        },
                        new
                        {
                            id = 11,
                            nom_zone = "Labo"
                        },
                        new
                        {
                            id = 12,
                            nom_zone = "Salle alimentaire Ap5"
                        },
                        new
                        {
                            id = 13,
                            nom_zone = "Salle alimentaire Ap6"
                        },
                        new
                        {
                            id = 14,
                            nom_zone = "Hâloir Ap7"
                        },
                        new
                        {
                            id = 15,
                            nom_zone = "Salle alimentaire Ap8"
                        },
                        new
                        {
                            id = 16,
                            nom_zone = "Salle alimentaire Ap9"
                        },
                        new
                        {
                            id = 17,
                            nom_zone = "Equipements mobiles"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SiteGestionResaCore.Data.utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.enquete", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.essai", "essai")
                        .WithOne("enquete")
                        .HasForeignKey("SiteGestionResaCore.Data.enquete", "essaiId")
                        .HasConstraintName("FK_enquete_essai")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.equipement", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.zone", "zone")
                        .WithMany("equipement")
                        .HasForeignKey("zoneID")
                        .HasConstraintName("FK_equipement_zone")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.essai", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.utilisateur", "manipulateur")
                        .WithMany("essai")
                        .HasForeignKey("manipulateurID")
                        .HasConstraintName("FK_essai_utilisateur")
                        .IsRequired();

                    b.HasOne("SiteGestionResaCore.Data.projet", "projet")
                        .WithMany("essai")
                        .HasForeignKey("projetID")
                        .HasConstraintName("FK_essai_projet")
                        .IsRequired();
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.projet", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.organisme", "organisme")
                        .WithMany("projet")
                        .HasForeignKey("organismeID")
                        .HasConstraintName("FK_projet_organisme");
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.reservation_projet", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.equipement", "equipement")
                        .WithMany("reservation_projet")
                        .HasForeignKey("equipementID")
                        .HasConstraintName("FK_reservation_projet_equipement")
                        .IsRequired();

                    b.HasOne("SiteGestionResaCore.Data.essai", "essai")
                        .WithMany("reservation_projet")
                        .HasForeignKey("essaiID")
                        .HasConstraintName("FK_reservation_projet_essai")
                        .IsRequired();
                });

            modelBuilder.Entity("SiteGestionResaCore.Data.utilisateur", b =>
                {
                    b.HasOne("SiteGestionResaCore.Data.organisme", "organisme")
                        .WithMany("utilisateur")
                        .HasForeignKey("organismeID")
                        .HasConstraintName("FK_utilisateur_organisme");
                });
#pragma warning restore 612, 618
        }
    }
}
